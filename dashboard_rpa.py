"""
Dashboard RPA - Sistema de Monitoramento
Interface web moderna para acompanhar agendamentos e execu√ß√µes dos RPAs

Desenvolvido em Portugu√™s Brasileiro
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
import requests
from typing import Dict, Any, List
import time

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard RPA - Sistema de Reparcelamento",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .status-success {
        background-color: #28a745;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-error {
        background-color: #dc3545;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-running {
        background-color: #ffc107;
        color: black;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class DashboardRPA:
    """Classe principal do dashboard"""
    
    def __init__(self):
        self.api_url = "http://localhost:5000"
        self.arquivo_historico = "logs/historico_execucoes.json"
        
    def carregar_historico(self) -> List[Dict]:
        """Carrega hist√≥rico de execu√ß√µes"""
        try:
            if os.path.exists(self.arquivo_historico):
                with open(self.arquivo_historico, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except:
            return []
    
    def obter_status_api(self) -> Dict[str, Any]:
        """Obt√©m status da API"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=5)
            if response.status_code == 200:
                return {"status": "online", "dados": response.json()}
            else:
                return {"status": "erro", "codigo": response.status_code}
        except:
            return {"status": "offline"}
    
    def obter_execucoes_ativas(self) -> Dict[str, Any]:
        """Obt√©m execu√ß√µes ativas da API"""
        try:
            response = requests.get(f"{self.api_url}/execucoes", timeout=5)
            if response.status_code == 200:
                return response.json()
            return {"dados": {"total": 0, "execucoes": []}}
        except:
            return {"dados": {"total": 0, "execucoes": []}}

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Inicializa dashboard
    dashboard = DashboardRPA()
    
    # Cabe√ßalho
    st.markdown('<h1 class="main-header">ü§ñ Dashboard RPA - Sistema de Reparcelamento</h1>', unsafe_allow_html=True)
    st.markdown("**Arquitetura Refatorada v2.0** - Monitoramento em tempo real dos 4 RPAs independentes")
    
    # Sidebar com controles
    with st.sidebar:
        st.header("‚öôÔ∏è Controles")
        
        # Auto-refresh
        auto_refresh = st.checkbox("üîÑ Auto-refresh (30s)", value=True)
        if auto_refresh:
            time.sleep(0.1)  # Para trigger do rerun
            st.rerun()
        
        st.markdown("---")
        
        # Configura√ß√µes
        st.header("üìã Configura√ß√µes")
        st.text("API URL: http://localhost:5000")
        
        # Status da API
        status_api = dashboard.obter_status_api()
        if status_api["status"] == "online":
            st.success("‚úÖ API Online")
        elif status_api["status"] == "offline":
            st.error("‚ùå API Offline")
        else:
            st.warning("‚ö†Ô∏è API com problemas")
        
        st.markdown("---")
        
        # A√ß√µes manuais
        st.header("üéÆ A√ß√µes Manuais")
        
        if st.button("üöÄ Executar RPAs 1+2 Agora"):
            with st.spinner("Executando..."):
                try:
                    os.system("python agendador_diario.py agora &")
                    st.success("‚úÖ Execu√ß√£o iniciada!")
                except:
                    st.error("‚ùå Erro ao executar")
        
        if st.button("üîÑ Workflow Completo"):
            with st.spinner("Iniciando workflow..."):
                try:
                    payload = {
                        "planilha_calculo_id": "1f723KXu5_KooZNHiYIB3EettKb-hUsOzDYMg7LNC_hk",
                        "planilha_apoio_id": "1f723KXu5_KooZNHiYIB3EettKb-hUsOzDYMg7LNC_hk",
                        "processar_todos": False
                    }
                    response = requests.post(f"{dashboard.api_url}/workflow/reparcelamento", json=payload)
                    if response.status_code == 200:
                        data = response.json()
                        st.success(f"‚úÖ Workflow iniciado! ID: {data['dados']['execucao_id']}")
                    else:
                        st.error("‚ùå Erro ao iniciar workflow")
                except:
                    st.error("‚ùå Erro de conex√£o")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # Carrega dados
    historico = dashboard.carregar_historico()
    execucoes_ativas = dashboard.obter_execucoes_ativas()
    
    with col1:
        st.metric(
            label="ü§ñ RPAs Ativos",
            value="4",
            delta="Independentes"
        )
    
    with col2:
        total_execucoes = len(historico)
        st.metric(
            label="üìä Execu√ß√µes Totais", 
            value=total_execucoes,
            delta=f"√öltimos 30 dias"
        )
    
    with col3:
        ativas = execucoes_ativas["dados"]["total"]
        st.metric(
            label="‚ö° Execu√ß√µes Ativas",
            value=ativas,
            delta="Em tempo real"
        )
    
    with col4:
        # Taxa de sucesso
        if historico:
            sucessos = sum(1 for exec in historico if exec["resultado"].get("sucesso_geral", False))
            taxa_sucesso = (sucessos / len(historico)) * 100
        else:
            taxa_sucesso = 0
        
        st.metric(
            label="‚úÖ Taxa de Sucesso",
            value=f"{taxa_sucesso:.1f}%",
            delta="√öltimas execu√ß√µes"
        )
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs(["üìà Vis√£o Geral", "‚è∞ Agendamentos", "üîç Execu√ß√µes Ativas", "üìä Hist√≥rico"])
    
    with tab1:
        # Vis√£o geral do sistema
        st.header("üéØ Status dos RPAs")
        
        rpa_col1, rpa_col2 = st.columns(2)
        
        with rpa_col1:
            st.subheader("ü§ñ RPA 1: Coleta de √çndices")
            st.write("**Fun√ß√£o**: Coleta IPCA/IGPM dos sites oficiais")
            st.write("**Frequ√™ncia**: Di√°rio √†s 08:00")
            st.write("**√öltima execu√ß√£o**: ", datetime.now().strftime("%d/%m/%Y %H:%M") if historico else "Nunca")
            
            st.subheader("üìä RPA 2: An√°lise de Planilhas") 
            st.write("**Fun√ß√£o**: Identifica contratos para reparcelamento")
            st.write("**Frequ√™ncia**: Di√°rio √†s 08:00 (ap√≥s RPA 1)")
            st.write("**√öltima an√°lise**: ", datetime.now().strftime("%d/%m/%Y %H:%M") if historico else "Nunca")
        
        with rpa_col2:
            st.subheader("üè¢ RPA 3: Processamento Sienge")
            st.write("**Fun√ß√£o**: Executa reparcelamento no ERP")
            st.write("**Frequ√™ncia**: Sob demanda (fila do RPA 2)")
            st.write("**Status**: Aguardando fila")
            
            st.subheader("üè¶ RPA 4: Processamento Sicredi")
            st.write("**Fun√ß√£o**: Atualiza carn√™s no WebBank")
            st.write("**Frequ√™ncia**: Ap√≥s RPA 3")
            st.write("**Status**: Aguardando processamento")
        
        # Gr√°fico de execu√ß√µes por dia
        if historico:
            st.header("üìà Execu√ß√µes por Dia")
            
            # Processa dados para gr√°fico
            df_historico = []
            for exec in historico[-14:]:  # √öltimos 14 dias
                data = exec["resultado"]["data"]
                sucesso = exec["resultado"].get("sucesso_geral", False)
                contratos = exec["resultado"].get("contratos_identificados", 0)
                
                df_historico.append({
                    "Data": data,
                    "Sucesso": "‚úÖ Sucesso" if sucesso else "‚ùå Erro",
                    "Contratos": contratos
                })
            
            if df_historico:
                df = pd.DataFrame(df_historico)
                
                fig = px.bar(
                    df, 
                    x="Data", 
                    y="Contratos",
                    color="Sucesso",
                    title="Contratos Identificados por Dia",
                    color_discrete_map={"‚úÖ Sucesso": "#28a745", "‚ùå Erro": "#dc3545"}
                )
                st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        # Agendamentos
        st.header("‚è∞ Configura√ß√£o de Agendamentos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìÖ Agendamento Atual")
            st.info("""
            **RPAs 1 e 2 (Di√°rios)**
            - ‚è∞ Hor√°rio: 08:00 (GMT-3)
            - üìä RPA 1: Coleta √≠ndices econ√¥micos
            - üìã RPA 2: Analisa contratos
            - üéØ RPAs 3 e 4: Disparados conforme demanda
            """)
        
        with col2:
            st.subheader("‚öôÔ∏è Pr√≥ximas Execu√ß√µes")
            
            # Calcula pr√≥ximas execu√ß√µes
            agora = datetime.now()
            proxima_execucao = agora.replace(hour=8, minute=0, second=0, microsecond=0)
            
            if proxima_execucao <= agora:
                proxima_execucao += timedelta(days=1)
            
            for i in range(7):  # Pr√≥ximos 7 dias
                data_exec = proxima_execucao + timedelta(days=i)
                dia_semana = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"][data_exec.weekday()]
                
                st.write(f"üìÖ {dia_semana}, {data_exec.strftime('%d/%m')} √†s 08:00")
        
        # Status do agendador
        st.header("üîß Status do Agendador")
        
        agendador_col1, agendador_col2 = st.columns(2)
        
        with agendador_col1:
            if st.button("‚ñ∂Ô∏è Iniciar Agendador"):
                with st.spinner("Iniciando agendador..."):
                    try:
                        os.system("python agendador_diario.py iniciar &")
                        st.success("‚úÖ Agendador iniciado!")
                    except:
                        st.error("‚ùå Erro ao iniciar agendador")
        
        with agendador_col2:
            if st.button("‚è∏Ô∏è Parar Agendador"):
                st.warning("‚ö†Ô∏è Funcionalidade em desenvolvimento")
    
    with tab3:
        # Execu√ß√µes ativas
        st.header("üîç Execu√ß√µes em Andamento")
        
        if execucoes_ativas["dados"]["total"] > 0:
            for exec_id in execucoes_ativas["dados"]["execucoes"]:
                with st.expander(f"üìã Execu√ß√£o: {exec_id}"):
                    try:
                        response = requests.get(f"{dashboard.api_url}/workflow/status/{exec_id}")
                        if response.status_code == 200:
                            dados = response.json()["dados"]
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.write(f"**Status**: {dados.get('status', 'Desconhecido')}")
                                st.write(f"**Etapa Atual**: {dados.get('etapa_atual', 'N/A')}")
                            
                            with col2:
                                st.write(f"**In√≠cio**: {dados.get('inicio', 'N/A')}")
                                etapas = dados.get('etapas_concluidas', [])
                                st.write(f"**Etapas Conclu√≠das**: {len(etapas)}/4")
                            
                            with col3:
                                if dados.get('status') == 'concluido':
                                    st.success("‚úÖ Conclu√≠do")
                                elif dados.get('status') == 'erro':
                                    st.error("‚ùå Erro")
                                else:
                                    st.info("‚è≥ Em execu√ß√£o")
                            
                            # Barra de progresso
                            progresso = len(etapas) / 4
                            st.progress(progresso)
                            
                        else:
                            st.error("‚ùå Erro ao obter status")
                    except:
                        st.error("‚ùå Erro de conex√£o")
        else:
            st.info("‚ÑπÔ∏è Nenhuma execu√ß√£o ativa no momento")
            
            # Bot√£o para executar teste
            if st.button("üß™ Executar Teste R√°pido"):
                with st.spinner("Executando teste..."):
                    try:
                        payload = {"planilha_id": "teste"}
                        response = requests.post(f"{dashboard.api_url}/rpa/coleta-indices", json=payload)
                        if response.status_code == 200:
                            st.success("‚úÖ Teste executado com sucesso!")
                        else:
                            st.error("‚ùå Erro no teste")
                    except:
                        st.error("‚ùå Erro de conex√£o")
    
    with tab4:
        # Hist√≥rico detalhado
        st.header("üìä Hist√≥rico de Execu√ß√µes")
        
        if historico:
            # Filtros
            col1, col2 = st.columns(2)
            
            with col1:
                dias_filtro = st.selectbox("üìÖ Per√≠odo", [7, 14, 30], index=2)
            
            with col2:
                apenas_sucessos = st.checkbox("‚úÖ Apenas sucessos")
            
            # Processa hist√≥rico filtrado
            historico_filtrado = historico[-dias_filtro:]
            
            if apenas_sucessos:
                historico_filtrado = [
                    exec for exec in historico_filtrado 
                    if exec["resultado"].get("sucesso_geral", False)
                ]
            
            # Tabela de execu√ß√µes
            dados_tabela = []
            for exec in historico_filtrado:
                resultado = exec["resultado"]
                
                dados_tabela.append({
                    "Data": resultado["data"],
                    "Hor√°rio": resultado["horario"],
                    "RPA 1": "‚úÖ" if resultado.get("rpa1_coleta_indices", {}).get("sucesso") else "‚ùå",
                    "RPA 2": "‚úÖ" if resultado.get("rpa2_analise_planilhas", {}).get("sucesso") else "‚ùå",
                    "Contratos": resultado.get("contratos_identificados", 0),
                    "RPAs 3+4": "‚úÖ" if resultado.get("rpas_34_disparados") else "‚è≥",
                    "Status Geral": "‚úÖ Sucesso" if resultado.get("sucesso_geral") else "‚ùå Erro"
                })
            
            if dados_tabela:
                df_tabela = pd.DataFrame(dados_tabela)
                st.dataframe(df_tabela, use_container_width=True)
                
                # Estat√≠sticas
                st.subheader("üìà Estat√≠sticas do Per√≠odo")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    total_contratos = sum(row["Contratos"] for row in dados_tabela)
                    st.metric("üéØ Total de Contratos", total_contratos)
                
                with col2:
                    execucoes_sucesso = len([row for row in dados_tabela if "‚úÖ" in row["Status Geral"]])
                    st.metric("‚úÖ Execu√ß√µes Bem-sucedidas", execucoes_sucesso)
                
                with col3:
                    media_contratos = total_contratos / len(dados_tabela) if dados_tabela else 0
                    st.metric("üìä M√©dia Contratos/Dia", f"{media_contratos:.1f}")
                
            else:
                st.info("‚ÑπÔ∏è Nenhuma execu√ß√£o encontrada no per√≠odo selecionado")
        else:
            st.info("‚ÑπÔ∏è Nenhum hist√≥rico dispon√≠vel ainda")
            st.write("Execute o agendador para gerar dados hist√≥ricos")
    
    # Footer
    st.markdown("---")
    st.markdown(
        "ü§ñ **Sistema RPA de Reparcelamento v2.0** | "
        "‚ö° **Arquitetura Refatorada** | "
        f"üïê **√öltima atualiza√ß√£o**: {datetime.now().strftime('%H:%M:%S')}"
    )
    
    # Auto-refresh
    if auto_refresh:
        time.sleep(30)
        st.rerun()

if __name__ == "__main__":
    main()