"""
MongoDB Manager
Sistema de persist√™ncia de dados para os RPAs

Desenvolvido em Portugu√™s Brasileiro
"""

import asyncio
from datetime import datetime
from typing import Dict, Any, List, Optional
import logging
from motor.motor_asyncio import AsyncIOMotorClient
import pymongo
import json

logger = logging.getLogger(__name__)

class MongoDBManager:
    """
    Gerenciador MongoDB para persist√™ncia dos dados dos RPAs
    """
    
    def __init__(self, connection_string: str = None):
        self.connection_string = connection_string or "mongodb://localhost:27017"
        self.database_name = "rpa_reparcelamento"
        self.client = None
        self.database = None
        self.conectado = False
    
    async def conectar(self) -> bool:
        """
        Conecta ao MongoDB
        """
        try:
            self.client = AsyncIOMotorClient(self.connection_string)
            self.database = self.client[self.database_name]
            
            # Teste de conex√£o
            await self.client.admin.command('ismaster')
            
            self.conectado = True
            logger.info("‚úÖ Conectado ao MongoDB com sucesso")
            
            # Criar √≠ndices necess√°rios
            await self._criar_indices()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar MongoDB: {str(e)}")
            self.conectado = False
            return False
    
    async def _criar_indices(self):
        """
        Cria √≠ndices necess√°rios nas collections
        """
        try:
            # √çndices para execu√ß√µes
            await self.database.execucoes_rpa.create_index([
                ("nome_rpa", pymongo.ASCENDING),
                ("timestamp_inicio", pymongo.DESCENDING)
            ])
            
            # √çndices para contratos
            await self.database.contratos_processados.create_index([
                ("numero_titulo", pymongo.ASCENDING),
                ("data_processamento", pymongo.DESCENDING)
            ])
            
            # √çndices para √≠ndices econ√¥micos
            await self.database.indices_economicos.create_index([
                ("tipo_indice", pymongo.ASCENDING),
                ("data_coleta", pymongo.DESCENDING)
            ])
            
            logger.info("‚úÖ √çndices MongoDB criados")
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao criar √≠ndices: {str(e)}")
    
    async def salvar_execucao_rpa(self, nome_rpa: str, parametros: Dict[str, Any], 
                                 resultado: Dict[str, Any]) -> str:
        """
        Salva execu√ß√£o de RPA no MongoDB
        
        Returns:
            ID da execu√ß√£o salva
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            documento = {
                "nome_rpa": nome_rpa,
                "timestamp_inicio": datetime.now(),
                "timestamp_fim": datetime.now(),
                "parametros_entrada": parametros,
                "resultado": resultado,
                "sucesso": resultado.get("sucesso", False),
                "tempo_execucao_segundos": resultado.get("tempo_execucao", 0),
                "mensagem": resultado.get("mensagem", ""),
                "erro": resultado.get("erro", None)
            }
            
            result = await self.database.execucoes_rpa.insert_one(documento)
            
            logger.info(f"üíæ Execu√ß√£o {nome_rpa} salva no MongoDB: {result.inserted_id}")
            return str(result.inserted_id)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar execu√ß√£o: {str(e)}")
            return None
    
    async def obter_execucoes_recentes(self, limite: int = 30) -> List[Dict[str, Any]]:
        """
        Obt√©m execu√ß√µes recentes dos RPAs
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            cursor = self.database.execucoes_rpa.find().sort(
                "timestamp_inicio", pymongo.DESCENDING
            ).limit(limite)
            
            execucoes = []
            async for doc in cursor:
                doc["_id"] = str(doc["_id"])  # Converter ObjectId para string
                execucoes.append(doc)
            
            return execucoes
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter execu√ß√µes: {str(e)}")
            return []
    
    async def salvar_indices_economicos(self, indices_data: Dict[str, Any]) -> str:
        """
        Salva √≠ndices econ√¥micos coletados
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            # Salvar IPCA
            if "ipca" in indices_data:
                doc_ipca = {
                    "tipo_indice": "IPCA",
                    "valor": indices_data["ipca"]["valor"],
                    "fonte": indices_data["ipca"]["fonte"],
                    "data_coleta": datetime.now(),
                    "periodo": "acumulado_12_meses",
                    "metodo_coleta": indices_data["ipca"].get("metodo", "webscraping")
                }
                await self.database.indices_economicos.insert_one(doc_ipca)
            
            # Salvar IGPM
            if "igpm" in indices_data:
                doc_igpm = {
                    "tipo_indice": "IGPM",
                    "valor": indices_data["igpm"]["valor"],
                    "fonte": indices_data["igpm"]["fonte"],
                    "data_coleta": datetime.now(),
                    "periodo": "acumulado_12_meses",
                    "metodo_coleta": indices_data["igpm"].get("metodo", "webscraping")
                }
                await self.database.indices_economicos.insert_one(doc_igpm)
            
            logger.info("üíæ √çndices econ√¥micos salvos no MongoDB")
            return "success"
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar √≠ndices: {str(e)}")
            return None
    
    async def obter_indices_historico(self, dias: int = 30) -> Dict[str, List]:
        """
        Obt√©m hist√≥rico de √≠ndices econ√¥micos
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            data_limite = datetime.now() - timedelta(days=dias)
            
            # IPCA
            cursor_ipca = self.database.indices_economicos.find({
                "tipo_indice": "IPCA",
                "data_coleta": {"$gte": data_limite}
            }).sort("data_coleta", pymongo.DESCENDING)
            
            ipca_historico = []
            async for doc in cursor_ipca:
                doc["_id"] = str(doc["_id"])
                ipca_historico.append(doc)
            
            # IGPM
            cursor_igpm = self.database.indices_economicos.find({
                "tipo_indice": "IGPM", 
                "data_coleta": {"$gte": data_limite}
            }).sort("data_coleta", pymongo.DESCENDING)
            
            igpm_historico = []
            async for doc in cursor_igpm:
                doc["_id"] = str(doc["_id"])
                igpm_historico.append(doc)
            
            return {
                "ipca": ipca_historico,
                "igpm": igpm_historico
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter hist√≥rico: {str(e)}")
            return {"ipca": [], "igpm": []}
    
    async def salvar_contrato_processado(self, contrato_data: Dict[str, Any]) -> str:
        """
        Salva dados de contrato processado
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            documento = {
                "numero_titulo": contrato_data.get("numero_titulo"),
                "cliente": contrato_data.get("cliente"),
                "empreendimento": contrato_data.get("empreendimento"),
                "data_processamento": datetime.now(),
                "status_sienge": contrato_data.get("status_sienge", "processado"),
                "status_sicredi": contrato_data.get("status_sicredi", "pendente"),
                "saldo_anterior": contrato_data.get("saldo_anterior", 0),
                "saldo_novo": contrato_data.get("saldo_novo", 0),
                "indice_aplicado": contrato_data.get("indice_aplicado", 0),
                "indexador": contrato_data.get("indexador", ""),
                "dados_completos": contrato_data
            }
            
            # Upsert baseado no n√∫mero do t√≠tulo
            result = await self.database.contratos_processados.replace_one(
                {"numero_titulo": documento["numero_titulo"]},
                documento,
                upsert=True
            )
            
            logger.info(f"üíæ Contrato {documento['numero_titulo']} salvo no MongoDB")
            return str(result.upserted_id) if result.upserted_id else "updated"
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar contrato: {str(e)}")
            return None
    
    async def obter_estatisticas_dashboard(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas para o dashboard
        """
        if not self.conectado:
            await self.conectar()
        
        try:
            # Total de execu√ß√µes
            total_execucoes = await self.database.execucoes_rpa.count_documents({})
            
            # Execu√ß√µes hoje
            hoje = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            execucoes_hoje = await self.database.execucoes_rpa.count_documents({
                "timestamp_inicio": {"$gte": hoje}
            })
            
            # Taxa de sucesso √∫ltimos 30 dias
            data_limite = datetime.now() - timedelta(days=30)
            cursor_recentes = self.database.execucoes_rpa.find({
                "timestamp_inicio": {"$gte": data_limite}
            })
            
            total_recentes = 0
            sucessos_recentes = 0
            
            async for doc in cursor_recentes:
                total_recentes += 1
                if doc.get("sucesso"):
                    sucessos_recentes += 1
            
            taxa_sucesso = (sucessos_recentes / total_recentes * 100) if total_recentes > 0 else 0
            
            # Contratos processados √∫ltimos 30 dias
            contratos_processados = await self.database.contratos_processados.count_documents({
                "data_processamento": {"$gte": data_limite}
            })
            
            return {
                "total_execucoes": total_execucoes,
                "execucoes_hoje": execucoes_hoje,
                "taxa_sucesso": round(taxa_sucesso, 1),
                "contratos_processados_mes": contratos_processados,
                "ultima_atualizacao": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas: {str(e)}")
            return {}
    
    async def desconectar(self):
        """
        Desconecta do MongoDB
        """
        if self.client:
            self.client.close()
            self.conectado = False
            logger.info("üîå Desconectado do MongoDB")

# Inst√¢ncia global do MongoDB Manager
mongodb_manager = MongoDBManager()

# Fun√ß√µes auxiliares para facilitar uso
async def salvar_execucao(nome_rpa: str, parametros: Dict[str, Any], resultado: Dict[str, Any]) -> str:
    """Fun√ß√£o auxiliar para salvar execu√ß√£o"""
    return await mongodb_manager.salvar_execucao_rpa(nome_rpa, parametros, resultado)

async def obter_execucoes_recentes(limite: int = 30) -> List[Dict[str, Any]]:
    """Fun√ß√£o auxiliar para obter execu√ß√µes recentes"""
    return await mongodb_manager.obter_execucoes_recentes(limite)

async def salvar_indices_economicos(indices_data: Dict[str, Any]) -> str:
    """Fun√ß√£o auxiliar para salvar √≠ndices"""
    return await mongodb_manager.salvar_indices_economicos(indices_data)

async def obter_estatisticas_dashboard() -> Dict[str, Any]:
    """Fun√ß√£o auxiliar para estat√≠sticas do dashboard"""
    return await mongodb_manager.obter_estatisticas_dashboard()