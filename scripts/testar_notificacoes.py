"""
Script de Teste - Sistema de Notifica√ß√µes
Testa envio de notifica√ß√µes por email usando Gmail API

Desenvolvido em Portugu√™s Brasileiro
"""

import sys
import os
from datetime import datetime

# Adicionar path do projeto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.notificacoes_simples import (
    notificar_sucesso, 
    notificar_erro, 
    notificar_workflow,
    testar_notificacoes,
    notificacoes
)

def testar_sistema_notificacoes():
    """Testa todas as funcionalidades de notifica√ß√£o"""
    print("üîî Testando Sistema de Notifica√ß√µes")
    print("=" * 50)
    
    # 1. Verificar configura√ß√µes
    print("\nüìã Verificando configura√ß√µes...")
    config = notificacoes.configuracoes
    print(f"‚úÖ Sistema habilitado: {config.get('habilitado', False)}")
    print(f"üìß Destinat√°rios: {config.get('destinatarios', [])}")
    print(f"üìÖ Eventos configurados: {list(config.get('eventos', {}).keys())}")
    
    # 2. Teste b√°sico de configura√ß√£o
    print("\nüß™ Executando teste b√°sico...")
    resultado_teste = testar_notificacoes()
    
    if resultado_teste:
        print("‚úÖ Teste b√°sico: SUCESSO")
    else:
        print("‚ùå Teste b√°sico: FALHOU")
        print("üí° Verifique se:")
        print("   - As credenciais do Google est√£o configuradas")
        print("   - O email remetente tem permiss√µes delegadas")
        print("   - Os destinat√°rios est√£o corretos")
        return False
    
    # 3. Teste de notifica√ß√£o de sucesso
    print("\nüéâ Testando notifica√ß√£o de sucesso...")
    resultado_sucesso = notificar_sucesso(
        nome_rpa="RPA Teste de Notifica√ß√µes",
        tempo_execucao="2 minutos",
        resultados={
            "registros_processados": 150,
            "arquivos_gerados": 3,
            "tempo_total": "2m 15s",
            "status_final": "Conclu√≠do com √™xito"
        }
    )
    
    if resultado_sucesso:
        print("‚úÖ Notifica√ß√£o de sucesso: ENVIADA")
    else:
        print("‚ùå Notifica√ß√£o de sucesso: FALHOU")
    
    # 4. Teste de notifica√ß√£o de erro
    print("\n‚ö†Ô∏è Testando notifica√ß√£o de erro...")
    resultado_erro = notificar_erro(
        nome_rpa="RPA Teste de Erro",
        erro="Timeout na conex√£o",
        detalhes="""
Erro detectado durante execu√ß√£o:
- Componente: Selenium WebDriver
- Tipo: TimeoutException
- Timestamp: {timestamp}
- A√ß√£o: Aguardando elemento #btn-login
- Timeout configurado: 30 segundos

Stack trace:
selenium.common.exceptions.TimeoutException: 
Message: Element not found within timeout period
        """.format(timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    )
    
    if resultado_erro:
        print("‚úÖ Notifica√ß√£o de erro: ENVIADA")
    else:
        print("‚ùå Notifica√ß√£o de erro: FALHOU")
    
    # 5. Teste de notifica√ß√£o de workflow
    print("\nüîÑ Testando notifica√ß√£o de workflow...")
    resultado_workflow = notificar_workflow(
        rpas=["RPA Coleta √çndices", "RPA An√°lise Planilhas", "RPA Sienge", "RPA Sicredi"],
        contratos=25,
        tempo="45 minutos"
    )
    
    if resultado_workflow:
        print("‚úÖ Notifica√ß√£o de workflow: ENVIADA")
    else:
        print("‚ùå Notifica√ß√£o de workflow: FALHOU")
    
    # 6. Resumo final
    print("\nüìä RESUMO DOS TESTES")
    print("=" * 30)
    
    testes_realizados = [
        ("Teste b√°sico", resultado_teste),
        ("Notifica√ß√£o de sucesso", resultado_sucesso),
        ("Notifica√ß√£o de erro", resultado_erro),
        ("Notifica√ß√£o de workflow", resultado_workflow)
    ]
    
    sucessos = sum(1 for _, resultado in testes_realizados if resultado)
    total = len(testes_realizados)
    
    for nome, resultado in testes_realizados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{nome}: {status}")
    
    print(f"\nüéØ Resultado final: {sucessos}/{total} testes passaram")
    
    if sucessos == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema de notifica√ß√µes funcionando perfeitamente.")
    elif sucessos > 0:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique as configura√ß√µes.")
    else:
        print("üö® TODOS OS TESTES FALHARAM. Sistema de notifica√ß√µes n√£o est√° funcionando.")
    
    return sucessos == total

def configurar_notificacoes_exemplo():
    """Configura exemplo de notifica√ß√µes"""
    print("\n‚öôÔ∏è Configurando exemplo de notifica√ß√µes...")
    
    # Configura√ß√£o de exemplo
    config_exemplo = {
        "habilitado": True,
        "destinatarios": [
            "admin@empresa.com",
            "ti@empresa.com"
        ],
        "eventos": {
            "rpa_concluido": True,
            "rpa_erro": True,
            "workflow_concluido": True,
            "indices_atualizados": False,
            "contratos_identificados": True
        }
    }
    
    notificacoes.configuracoes.update(config_exemplo)
    notificacoes.salvar_configuracoes()
    
    print("‚úÖ Configura√ß√£o de exemplo salva!")
    print("üìß Destinat√°rios configurados:")
    for email in config_exemplo["destinatarios"]:
        print(f"   - {email}")

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ SISTEMA DE NOTIFICA√á√ïES RPA v2.0")
    print("Teste completo de funcionalidades")
    print("=" * 50)
    
    # Configurar exemplo
    configurar_notificacoes_exemplo()
    
    # Executar testes
    sucesso = testar_sistema_notificacoes()
    
    print("\n" + "=" * 50)
    if sucesso:
        print("üéØ SISTEMA PRONTO PARA USO!")
        print("\nüí° Pr√≥ximos passos:")
        print("1. Configure seus emails reais no dashboard")
        print("2. Teste com o bot√£o 'Testar Notifica√ß√µes'")
        print("3. Execute os RPAs e receba notifica√ß√µes automaticamente")
    else:
        print("üîß CONFIGURA√á√ÉO NECESS√ÅRIA!")
        print("\nüí° Para ativar as notifica√ß√µes:")
        print("1. Configure suas credenciais do Google Gmail API")
        print("2. Configure o email remetente nas vari√°veis de ambiente")
        print("3. Adicione seus emails de destino no dashboard")

if __name__ == "__main__":
    main()