#!/usr/bin/env python3
"""
Teste Independente - RPA Coleta de √çndices
Permite testar o RPA fora da orquestra√ß√£o Temporal para desenvolvimento e homologa√ß√£o

Desenvolvido em Portugu√™s Brasileiro
"""

from rpa_coleta_indices import RPAColetaIndices, executar_coleta_indices
import asyncio
import sys
import os
from datetime import datetime

# Adiciona diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


async def teste_completo():
    """
    Executa teste completo do RPA Coleta de √çndices
    """
    print("üß™ TESTE RPA COLETA DE √çNDICES")
    print("=" * 50)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 50)

    # Configura√ß√µes de teste
    # ID da planilha do cliente
    PLANILHA_ID = "1f723KXu5_KooZNHiYIB3EettKb-hUsOzDYMg7LNC_hk"
    CREDENCIAIS_GOOGLE = "credentials/gspread-459713-aab8a657f9b0.json"

    print(f"üìä Planilha de Teste: {PLANILHA_ID}")
    print(f"üîê Credenciais: {CREDENCIAIS_GOOGLE}")
    print()

    try:
        # Executa RPA usando fun√ß√£o auxiliar
        print("üöÄ Iniciando execu√ß√£o do RPA...")
        resultado = await executar_coleta_indices(
            planilha_id=PLANILHA_ID,
            credenciais_google=CREDENCIAIS_GOOGLE
        )

        # Mostra resultado
        print("\nüìã RESULTADO DA EXECU√á√ÉO:")
        print("-" * 30)
        print(f"Status: {resultado}")
        print(f"Sucesso: {'‚úÖ SIM' if resultado.sucesso else '‚ùå N√ÉO'}")
        print(f"Mensagem: {resultado.mensagem}")

        if resultado.tempo_execucao:
            print(f"Tempo: {resultado.tempo_execucao:.2f} segundos")

        if resultado.sucesso and resultado.dados:
            print("\nüìä DADOS COLETADOS:")
            dados = resultado.dados

            if "ipca" in dados:
                ipca = dados["ipca"]
                print(f"   IPCA: {ipca['valor']}% ({ipca['fonte']})")
                print(f"   Per√≠odo: {ipca['periodo']}")

            if "igpm" in dados:
                igpm = dados["igpm"]
                print(f"   IGPM: {igpm['valor']}% ({igpm['fonte']})")
                print(f"   Per√≠odo: {igpm['periodo']}")

            if "planilha_atualizada" in dados:
                print(
                    f"   Planilha atualizada: {dados['planilha_atualizada']}")

        if not resultado.sucesso and resultado.erro:
            print(f"\n‚ùå ERRO: {resultado.erro}")

        print("\nüîó LINKS √öTEIS:")
        print(
            f"   Planilha: https://docs.google.com/spreadsheets/d/{PLANILHA_ID}")

        return resultado.sucesso

    except Exception as e:
        print(f"\nüí• ERRO INESPERADO: {str(e)}")
        import traceback
        print(f"üîç Detalhes: {traceback.format_exc()}")
        return False


async def teste_conexao_google_sheets():
    """
    Testa apenas a conex√£o com Google Sheets
    """
    print("üß™ TESTE DE CONEX√ÉO - GOOGLE SHEETS")
    print("=" * 40)

    try:
        # Cria inst√¢ncia do RPA apenas para testar conex√£o
        rpa = RPAColetaIndices()

        # Inicializa recursos
        if await rpa.inicializar():
            print("‚úÖ Recursos inicializados com sucesso")

            # Testa conex√£o Google Sheets
            await rpa._conectar_google_sheets()
            print("‚úÖ Conex√£o Google Sheets estabelecida")

            # Testa acesso √† planilha
            PLANILHA_ID = "1f723KXu5_KooZNHiYIB3EettKb-hUsOzDYMg7LNC_hk"
            planilha = rpa.cliente_sheets.open_by_key(PLANILHA_ID)
            print(f"‚úÖ Planilha acessada: {planilha.title}")

            # Lista abas
            abas = planilha.worksheets()
            print(f"üìã Abas encontradas: {len(abas)}")
            for i, aba in enumerate(abas, 1):
                print(f"   {i}. {aba.title}")

            await rpa.finalizar()
            return True

        else:
            print("‚ùå Falha na inicializa√ß√£o dos recursos")
            return False

    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        return False


async def teste_coleta_apis():
    """
    Testa apenas a coleta via APIs (sem webscraping)
    """
    print("üß™ TESTE DE COLETA - APIs BANCO CENTRAL")
    print("=" * 45)

    try:
        rpa = RPAColetaIndices()
        await rpa.inicializar()

        # Testa coleta IPCA
        print("üìä Testando coleta IPCA via API BCB...")
        ipca_valor = await rpa._coletar_ipca_api_bcb()
        print(f"‚úÖ IPCA coletado: {ipca_valor}%")

        # Testa coleta IGPM
        print("üìä Testando coleta IGPM via API BCB...")
        igpm_valor = await rpa._coletar_igpm_api_bcb()
        print(f"‚úÖ IGPM coletado: {igpm_valor}%")

        await rpa.finalizar()
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        return False


async def verificar_saude_rpa():
    """
    Verifica sa√∫de do RPA (recursos dispon√≠veis)
    """
    print("üß™ VERIFICA√á√ÉO DE SA√öDE - RPA")
    print("=" * 35)

    try:
        rpa = RPAColetaIndices()
        saude = await rpa.verificar_saude()

        print(f"Status Geral: {saude['status'].upper()}")
        print(f"Timestamp: {saude['timestamp']}")
        print("\nDetalhes:")
        for componente, status in saude['detalhes'].items():
            emoji = "‚úÖ" if "conectado" in status or "disponivel" in status else "‚ùå"
            print(f"  {emoji} {componente}: {status}")

        return saude['status'] == 'saudavel'

    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {str(e)}")
        return False


def menu_interativo():
    """
    Menu interativo para escolher tipo de teste
    """
    print("\nüéØ MENU DE TESTES - RPA COLETA DE √çNDICES")
    print("=" * 50)
    print("1. üöÄ Teste Completo (Coleta + Planilha)")
    print("2. üîó Teste Conex√£o Google Sheets")
    print("3. üìä Teste Coleta APIs")
    print("4. üè• Verifica√ß√£o de Sa√∫de")
    print("5. ‚ùå Sair")
    print("=" * 50)

    while True:
        try:
            opcao = input("\nüëâ Escolha uma op√ß√£o (1-5): ").strip()

            if opcao == "1":
                return teste_completo()
            elif opcao == "2":
                return teste_conexao_google_sheets()
            elif opcao == "3":
                return teste_coleta_apis()
            elif opcao == "4":
                return verificar_saude_rpa()
            elif opcao == "5":
                print("üëã Encerrando testes...")
                return None
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha entre 1-5.")

        except KeyboardInterrupt:
            print("\nüëã Teste interrompido pelo usu√°rio")
            return None


async def main():
    """
    Fun√ß√£o principal do teste
    """
    print("ü§ñ SISTEMA DE TESTES RPA - COLETA DE √çNDICES")
    print("Desenvolvido em Python")
    print("Permite testar RPA independente da orquestra√ß√£o Temporal")

    # Verifica se √© execu√ß√£o direta ou interativa
    if len(sys.argv) > 1:
        # Execu√ß√£o direta com par√¢metros
        comando = sys.argv[1].lower()

        if comando == "completo":
            sucesso = await teste_completo()
        elif comando == "conexao":
            sucesso = await teste_conexao_google_sheets()
        elif comando == "apis":
            sucesso = await teste_coleta_apis()
        elif comando == "saude":
            sucesso = await verificar_saude_rpa()
        else:
            print(f"‚ùå Comando inv√°lido: {comando}")
            print("Comandos dispon√≠veis: completo, conexao, apis, saude")
            return False

        return sucesso

    else:
        # Menu interativo
        teste_escolhido = menu_interativo()
        if teste_escolhido:
            sucesso = await teste_escolhido

            if sucesso:
                print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
            else:
                print("\n‚ùå TESTE FALHOU!")

            return sucesso

        return True

if __name__ == "__main__":
    # Configura event loop para Windows se necess√°rio
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    # Executa teste
    try:
        resultado = asyncio.run(main())

        if resultado is not None:
            sys.exit(0 if resultado else 1)
        else:
            sys.exit(0)

    except KeyboardInterrupt:
        print("\nüëã Teste cancelado pelo usu√°rio")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• Erro fatal: {str(e)}")
        sys.exit(1)
