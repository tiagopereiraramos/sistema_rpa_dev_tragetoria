"""
Dashboard de Notifica√ß√µes - Sistema RPA v2.0
Interface para configurar notifica√ß√µes por email

Desenvolvido em Portugu√™s Brasileiro
"""

import streamlit as st
import json
import os
from datetime import datetime
from core.notificacoes_simples import notificacoes, testar_notificacoes

def renderizar_aba_notificacoes():
    """Renderiza aba de configura√ß√£o de notifica√ß√µes"""
    
    st.header("üìß Configura√ß√£o de Notifica√ß√µes")
    
    # Carregar configura√ß√µes atuais
    config = notificacoes.configuracoes
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è Configura√ß√µes Gerais")
        
        # Toggle geral de notifica√ß√µes
        habilitado = st.toggle(
            "üîî Notifica√ß√µes Habilitadas",
            value=config.get('habilitado', True),
            help="Ativa ou desativa todas as notifica√ß√µes do sistema"
        )
        
        if habilitado:
            # Configura√ß√£o de destinat√°rios
            st.subheader("üì¨ Destinat√°rios")
            
            # Lista atual de emails
            emails_atuais = config.get('destinatarios', ['admin@empresa.com'])
            
            # Editor de emails
            for i, email in enumerate(emails_atuais):
                col_email, col_remover = st.columns([3, 1])
                with col_email:
                    novo_email = st.text_input(
                        f"Email {i+1}",
                        value=email,
                        key=f"email_{i}",
                        placeholder="exemplo@empresa.com"
                    )
                    emails_atuais[i] = novo_email
                
                with col_remover:
                    if len(emails_atuais) > 1:  # Manter pelo menos um email
                        if st.button("üóëÔ∏è", key=f"remover_{i}", help="Remover este email"):
                            emails_atuais.pop(i)
                            st.rerun()
            
            # Bot√£o para adicionar novo email
            if st.button("‚ûï Adicionar Email"):
                emails_atuais.append("")
                st.rerun()
            
            # Configura√ß√£o de eventos
            st.subheader("üìÖ Eventos para Notificar")
            
            eventos_config = config.get('eventos', {})
            
            col_evento1, col_evento2 = st.columns(2)
            
            with col_evento1:
                st.write("**RPAs Individuais:**")
                rpa_concluido = st.checkbox(
                    "‚úÖ RPA Conclu√≠do com Sucesso",
                    value=eventos_config.get('rpa_concluido', True),
                    help="Notifica quando um RPA individual √© conclu√≠do"
                )
                
                rpa_erro = st.checkbox(
                    "‚ùå Erro no RPA",
                    value=eventos_config.get('rpa_erro', True),
                    help="Notifica quando ocorre erro em um RPA"
                )
                
                indices_atualizados = st.checkbox(
                    "üìä √çndices Econ√¥micos Atualizados",
                    value=eventos_config.get('indices_atualizados', False),
                    help="Notifica quando IPCA/IGPM s√£o atualizados"
                )
            
            with col_evento2:
                st.write("**Workflows Completos:**")
                workflow_concluido = st.checkbox(
                    "üîÑ Workflow Conclu√≠do",
                    value=eventos_config.get('workflow_concluido', True),
                    help="Notifica quando workflow completo √© finalizado"
                )
                
                contratos_identificados = st.checkbox(
                    "üìã Contratos Identificados",
                    value=eventos_config.get('contratos_identificados', True),
                    help="Notifica quando contratos para reparcelamento s√£o identificados"
                )
        
        # Bot√µes de a√ß√£o
        st.markdown("---")
        col_salvar, col_testar, col_reset = st.columns(3)
        
        with col_salvar:
            if st.button("üíæ Salvar Configura√ß√µes", type="primary", use_container_width=True):
                # Atualizar configura√ß√µes
                nova_config = {
                    'habilitado': habilitado,
                    'destinatarios': [email for email in emails_atuais if email.strip()],
                    'eventos': {
                        'rpa_concluido': rpa_concluido if habilitado else False,
                        'rpa_erro': rpa_erro if habilitado else False,
                        'workflow_concluido': workflow_concluido if habilitado else False,
                        'indices_atualizados': indices_atualizados if habilitado else False,
                        'contratos_identificados': contratos_identificados if habilitado else False
                    }
                }
                
                notificacoes.configuracoes.update(nova_config)
                notificacoes.salvar_configuracoes()
                
                st.success("‚úÖ Configura√ß√µes salvas com sucesso!")
                time.sleep(1)
                st.rerun()
        
        with col_testar:
            if st.button("üß™ Testar Notifica√ß√µes", use_container_width=True):
                if habilitado and emails_atuais:
                    with st.spinner("Enviando email de teste..."):
                        resultado = testar_notificacoes()
                        if resultado:
                            st.success("‚úÖ Email de teste enviado com sucesso!")
                        else:
                            st.error("‚ùå Falha ao enviar email de teste. Verifique as configura√ß√µes.")
                else:
                    st.warning("‚ö†Ô∏è Configure ao menos um email e habilite as notifica√ß√µes")
        
        with col_reset:
            if st.button("üîÑ Restaurar Padr√µes", use_container_width=True):
                if st.button("‚úÖ Confirmar Reset", key="confirmar_reset"):
                    # Restaurar configura√ß√µes padr√£o
                    config_padrao = {
                        "habilitado": True,
                        "destinatarios": ["admin@empresa.com"],
                        "eventos": {
                            "rpa_concluido": True,
                            "rpa_erro": True,
                            "workflow_concluido": True,
                            "indices_atualizados": False,
                            "contratos_identificados": True
                        }
                    }
                    
                    notificacoes.configuracoes.update(config_padrao)
                    notificacoes.salvar_configuracoes()
                    
                    st.success("‚úÖ Configura√ß√µes restauradas!")
                    time.sleep(1)
                    st.rerun()
    
    with col2:
        st.subheader("üìã Status do Sistema")
        
        # Card de status
        if habilitado:
            st.success("üü¢ Sistema Ativo")
        else:
            st.error("üî¥ Sistema Inativo")
        
        # Informa√ß√µes de configura√ß√£o
        st.metric("üìß Emails Configurados", len([e for e in emails_atuais if e.strip()]))
        
        eventos_ativos = sum(1 for v in eventos_config.values() if v) if habilitado else 0
        st.metric("üìÖ Eventos Ativos", eventos_ativos)
        
        # √öltimas notifica√ß√µes (simulado)
        st.subheader("üì® √öltimas Notifica√ß√µes")
        
        historico_simulado = [
            {"data": "27/05/2025 14:30", "evento": "RPA Conclu√≠do", "status": "‚úÖ"},
            {"data": "27/05/2025 09:15", "evento": "Workflow Iniciado", "status": "üîÑ"},
            {"data": "26/05/2025 18:45", "evento": "√çndices Atualizados", "status": "üìä"}
        ]
        
        for item in historico_simulado:
            with st.container():
                st.markdown(f"""
                <div style="
                    background-color: #f8f9fa;
                    padding: 10px;
                    border-radius: 5px;
                    margin: 5px 0;
                    border-left: 3px solid #007bff;
                ">
                    <strong>{item['status']} {item['evento']}</strong><br>
                    <small style="color: #6c757d;">{item['data']}</small>
                </div>
                """, unsafe_allow_html=True)
        
        # Configura√ß√µes do sistema
        st.subheader("‚öôÔ∏è Configura√ß√µes do Sistema")
        
        with st.expander("üîß Configura√ß√µes Avan√ßadas"):
            st.info("""
            **Email de Remetente:** sistema.rpa@empresa.com
            
            **Template:** HTML responsivo
            
            **M√©todo:** Gmail API com Service Account
            
            **Configura√ß√£o:** Autom√°tica via credenciais Google
            """)
            
            # Vari√°veis de ambiente relevantes
            st.code("""
            # Vari√°veis de ambiente necess√°rias:
            EMAIL_REMETENTE=sistema.rpa@empresa.com
            EMAIL_ADMIN=admin@empresa.com
            """)

def main():
    """Fun√ß√£o principal para teste standalone"""
    st.title("üîî Sistema de Notifica√ß√µes RPA")
    renderizar_aba_notificacoes()

if __name__ == "__main__":
    main()